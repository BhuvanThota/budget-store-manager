// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth required models
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // A user can be a member of a shop
  shopId        String?
  shop          Shop?     @relation(fields: [shopId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// NEW: Add the Shop model
model Shop {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // A shop can have many users (members)
  members   User[]
  // A shop has its own set of products, orders, and requests
  products  Product[]
  orders    Order[]
  requests  Request[]
}

// UPDATE: Link Product to a Shop
model Product {
  id           String @id @default(uuid())
  name         String
  totalCost    Float
  initialStock Int
  currentStock Int
  sellPrice    Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  shopId       String
  shop         Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)

  orderItems   OrderItem[]

  @@unique([shopId, name]) // A product name must be unique within a shop
}

// UPDATE: Link Order to a Shop
model Order {
  id          String   @id @default(uuid())
  orderId     Int      @default(autoincrement())
  totalAmount Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  shopId      String
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  
  items       OrderItem[]

  @@unique([shopId, orderId])
}

model OrderItem {
  id           String  @id @default(uuid())
  quantity     Int
  soldAt       Float
  costAtSale   Float
  
  order        Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      String
  
  product      Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  productId    String
  productName  String
}

// UPDATE: Link Request to a Shop
model Request {
  id        String   @id @default(uuid())
  item      String
  createdAt DateTime @default(now())

  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
}